lets make some grey boxes

    function setup() {
      g.size(400,400);
      g.background(0);
      g.noStroke();
      
      g.fill(16);
      g.rect(0,0,100,100);

      g.fill(32);
      g.rect(100,0,100,100);

      g.fill(48);
      g.rect(200,0,100,100);

      g.fill(64);
      g.rect(300,0,100,100);
    }

This is fine, but we have a problem. What happens if we want to change the number of boxes or the size of the screen? We have to change all the code. The problem with the code above is that it is full of 'magic number,' numbers in our code where we don't explain the meaning of them anywhere. Lets fix that, and make it easier to modify the code to support different options:

    function setup() {
      var width = 400;
      var boxes_per_row = 4;
      var box_width = width/boxes_per_row;

      var height = 400;
      var boxes_per_column = 4;
      var box_height = height/boxes_per_column;
      
      var number_of_boxes = boxes_per_column * boxes_per_row;
      var color_step = 255 / number_of_boxes;

      var color = 0;
      var x = 0;
      var y = 0;
      
      g.size(width,height);
      g.background(0);
      g.stroke(255);
      
      g.fill(color);
      g.rect(x,y,box_width,box_height);
      x += box_width;
      color += color_step;

      g.fill(color);
      g.rect(x,y,box_width,box_height);
      x += box_width;
      color += color_step;

      g.fill(color);
      g.rect(x,y,box_width,box_height);
      x += box_width;
      color += color_step;

      g.fill(color);
      g.rect(x,y,box_width,box_height);
    }


That is better, because it lets us easily change the size, but still there is a lot of duplication of code. Also, it doesn't work if we increase the number of boxes per row. Lets clean that up with a while loop:

    function setup() {
      var width = 400;
      var boxes_per_row = 4;
      var box_width = width/boxes_per_row;

      var height = 400;
      var boxes_per_column = 4;
      var box_height = height/boxes_per_column;
      
      var number_of_boxes = boxes_per_column * boxes_per_row;
      var color_step = 255 / number_of_boxes;

      var color = 0;
      var x = 0;
      var y = 0;
      
      g.size(width,height);
      g.background(0);
      g.stroke(255);
      
      var i = 0;
      while (i<boxes_per_row) {
        g.fill(color);
        g.rect(x,y,box_width,box_height);
        x += box_width;
        color += color_step;
        i++;
      }  
    }

This code does the same thing, but by adding a while loop we eliminate a lot of code duplication and now we can use whatever value we want for `boxes_per_row` and our `while` loop will correctly draw all the boxes.

Lets add some rows to fill in our whole drawing space with boxes. We will do this by putting a `while` loop inside another `while` loop:

    function setup() {
      var width = 400;
      var boxes_per_row = 4;
      var box_width = width/boxes_per_row;

      var height = 400;
      var boxes_per_column = 4;
      var box_height = height/boxes_per_column;
      
      var number_of_boxes = boxes_per_column * boxes_per_row;
      var color_step = 255 / number_of_boxes;

      var color = 0;
      
      g.size(width,height);
      g.background(0);
      g.stroke(255);
      
      var current_row = 0;
      while(current_row < boxes_per_column) {
        var current_column = 0;
        while (current_column < boxes_per_row) {
          var x = current_column * box_width;
          var y = current_row * box_height;
          g.fill(color);
          g.rect(x,y,box_width,box_height);
          color += color_step;
          current_column++;
        }
        current_row++;
      }  
    }

The outer `while` loop runs once for each row, and the inner `while` loop will run once for each column. Because the loops are nested, the inner loop will run once for each column, *for every row*. This generates boxes to fill our entire grid.

Now, lets add come color:

    function setup() {
      var width = 400;
      var boxes_per_row = 4;
      var box_width = width/boxes_per_row;

      var height = 400;
      var boxes_per_column = 4;
      var box_height = height/boxes_per_column;
      
      var number_of_boxes = boxes_per_column * boxes_per_row;
      var color_step = 255 / number_of_boxes;
      
      g.size(width,height);
      g.background(0);
      g.stroke(255);
      
      var current_row = 0;
      while(current_row < boxes_per_column) {
        var current_column = 0;
        while (current_column < boxes_per_row) {
          var x = current_column * box_width;
          var y = current_row * box_height;
          var red = x/width * 255;
          var green = y/height * 255;
          var blue = 50;
          var color = g.color(red,green,blue);
          g.fill(color);
          g.rect(x,y,box_width,box_height);
          current_column++;
        }
        current_row++;
      }  
    }

Play with changing the colors and changing the number of boxes.

What is the line `var red = x/width * 255` doing?


