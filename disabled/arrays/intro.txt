You are walking along one day and stumble upon three kittens. You name them Oliver, Sasha, and Matilda. 

Suppose you want to write a computer program about your kittens. You could create variables for your kittens like so:

    var kitten1 = "Oliver";
    var kitten2 = "Sasha";
    var kitten3 = "Matilda";

    function nap(kitten) {
      write(kitten + " takes a nap.");
    }

    // send them all to bed:
    nap(kitten1);
    nap(kitten2);
    nap(kitten3);
    write('------');

You found another kitten! Her name is Harriet. That is going to get rather cumbersome if you keep finding kittens. Lets redo this using arrays:

    var kittens = [
      "Oliver", "Sasha", "Matilda", "Harriet"
    ];

    nap(kittens[0]);
    nap(kittens[1]);
    nap(kittens[2]);
    nap(kittens[3]);
    write('------');

Hmmm... That is not really any better. But we can improve it:

    var i = 0;
    nap(kittens[i]);
    i++;
    nap(kittens[i]);
    i++;
    nap(kittens[i]);
    i++;
    nap(kittens[i]);
    write('------');
    
What! Are you joking? That is way worse. OK, OK, it is worse. But we can use a *for loop* to make the computer run the same instructions, but in a way that we have to write much less code:

    for (var i=0; i<4; i++) {
      nap(kittens[i]);
    }
    write('------');


